openapi: 3.0.0
info:
  title: PYQ Learning Gap Chat API
  version: 1.0.0
  description: API for registration, OTP login via Twilio, college data, exams & subjects.

servers:
  - url: https://pyq-learninng-gap-chat-production.up.railway.app
    description: Production server

tags:
  - name: Auth
    description: Twilio OTP Authentication
  - name: Users
    description: User registration and profile
  - name: Colleges
    description: List of medical colleges
  - name: Exams
    description: Exams and their subjects
  - name: Import MCQs
    description: Upload MCQs from Google Sheets into raw_primary_mcqs
  - name: Generation
    description: Queue MCQs for GPT-powered question generation
  - name: Adaptive MCQs
    description: Adaptive MCQ Graph Retrieval, Response Submission, Progress Resume, and Scoring

paths:

  /auth/otp/start:
    post:
      tags: [Auth]
      summary: Send OTP via Twilio
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [phone]
              properties:
                phone:
                  type: string
                  example: "9876543210"
      responses:
        '200':
          description: OTP sent successfully
        '400':
          description: Phone number missing or invalid
        '500':
          description: Failed to send OTP

  /auth/otp/verify:
    post:
      tags: [Auth]
      summary: Verify OTP via Twilio
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [phone, otp]
              properties:
                phone:
                  type: string
                  example: "9876543210"
                otp:
                  type: string
                  example: "123456"
      responses:
        '200':
          description: OTP verified successfully
        '401':
          description: Invalid OTP
        '500':
          description: Verification failed

  /users/register:
    post:
      tags: [Users]
      summary: Register a new student
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User registered successfully
        '409':
          description: User already registered
        '400':
          description: Missing required fields
        '500':
          description: Registration failed

  /users/{id}:
    get:
      tags: [Users]
      summary: Get user profile by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

  /users/phone/{phone}:
    get:
      tags: [Users]
      summary: Get full user profile by phone number
      parameters:
        - in: path
          name: phone
          required: true
          schema:
            type: string
            example: "9876543210"
      responses:
        '200':
          description: Full user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

  /users/status/{phone}:
    get:
      tags: [Users]
      summary: Check user activation status by phone number
      parameters:
        - in: path
          name: phone
          required: true
          schema:
            type: string
            example: "9876543210"
      responses:
        '200':
          description: Activation status
          content:
            application/json:
              schema:
                type: object
                properties:
                  phone:
                    type: string
                  is_active:
                    type: boolean
        '404':
          description: User not found

  /users/phone/{phone}/toggle-activation:
    patch:
      tags: [Users]
      summary: Toggle user activation status by phone number
      parameters:
        - in: path
          name: phone
          required: true
          schema:
            type: string
            example: "9876543210"
      responses:
        '200':
          description: Activation status updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  phone:
                    type: string
                  is_active:
                    type: boolean
        '404':
          description: User not found
        '500':
          description: Failed to update user status

  /colleges:
    get:
      tags: [Colleges]
      summary: Get all medical colleges
      responses:
        '200':
          description: List of medical colleges
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/College'
        '500':
          description: Failed to fetch colleges

  /colleges:
    post:
      tags: [Colleges]
      summary: Add a new medical college
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/College'
      responses:
        '201':
          description: College added successfully
        '400':
          description: Invalid input
        '500':
          description: Error while adding college

  /exams:
    post:
      tags: [Exams]
      summary: Create one or multiple exams
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  required: [name]
                  properties:
                    name:
                      type: string
                      example: "NEET PG"
                - type: array
                  items:
                    type: object
                    required: [name]
                    properties:
                      name:
                        type: string
                        example: "FMGE"
      responses:
        '201':
          description: Exam(s) created
        '400':
          description: Missing name field(s)
        '500':
          description: Server error

  /exams/{examId}/subjects:
    post:
      tags: [Exams]
      summary: Create one or multiple subjects under an exam
      parameters:
        - in: path
          name: examId
          required: true
          schema:
            type: string
            example: "exam-uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  required: [name]
                  properties:
                    name:
                      type: string
                      example: "Anatomy"
                - type: array
                  items:
                    type: object
                    required: [name]
                    properties:
                      name:
                        type: string
                        example: "Physiology"
      responses:
        '201':
          description: Subject(s) created
        '400':
          description: Missing examId or subject name(s)
        '500':
          description: Server error

  /api/exams/with-subjects:
    get:
      tags: [Exams]
      summary: Get all exams with their subjects
      responses:
        '200':
          description: Exams with nested subjects
          content:
            application/json:
              schema:
                type: object
                properties:
                  exams:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        subjects:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                              name:
                                type: string
        '500':
          description: Server error

  /api/import-mcqs:
    post:
      tags: [Import MCQs]
      summary: Import MCQs from Google Sheets into raw_primary_mcqs table
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [sheetUrl, examId, subjectId]
              properties:
                sheetUrl:
                  type: string
                  example: "https://docs.google.com/spreadsheets/d/e/abc123/pub?output=csv"
                examId:
                  type: string
                  example: "a9c1e690-4f18-4c62-b3e9-f47384135a20"
                subjectId:
                  type: string
                  example: "e7b2e1e7-5cbe-4b4e-b5ea-d0741e51e0e1"
      responses:
        '200':
          description: MCQs imported successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "âœ… Imported 25 MCQs."
        '400':
          description: Missing required fields
        '500':
          description: Import failed

  /generation/queue:
    post:
      tags: [Generation]
      summary: Queue raw MCQs for GPT generation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [examId, subjectId]
              properties:
                examId:
                  type: string
                  example: "a9c1e690-4f18-4c62-b3e9-f47384135a20"
                subjectId:
                  type: string
                  example: "e7b2e1e7-5cbe-4b4e-b5ea-d0741e51e0e1"
      responses:
        '201':
          description: MCQs queued successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "âœ… 25 MCQs added to generation queue."
                  queued:
                    type: integer
                    example: 25
        '200':
          description: No MCQs found to queue
        '400':
          description: Missing examId or subjectId
        '500':
          description: Failed to queue MCQs

  /generation/status:
    get:
      tags: [Generation]
      summary: Get current GPT generation queue status
      responses:
        '200':
          description: Current MCQ generation queue status
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    example: 100
                  pending:
                    type: integer
                    example: 60
                  processing:
                    type: integer
                    example: 20
                  completed:
                    type: integer
                    example: 15
                  failed:
                    type: integer
                    example: 5
        '500':
          description: Failed to fetch queue status

  /generation/results:
    get:
      summary: Get all GPT-generated MCQ outputs
      tags:
        - Generation
      parameters:
        - in: query
          name: examId
          required: false
          schema:
            type: string
          description: Optional exam UUID to filter results
        - in: query
          name: subjectId
          required: false
          schema:
            type: string
          description: Optional subject UUID to filter results
      responses:
        200:
          description: List of generated MCQ graphs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    raw_mcq_id:
                      type: string
                      format: uuid
                    exam_id:
                      type: string
                      format: uuid
                    subject_id:
                      type: string
                      format: uuid
                    graph:
                      type: object
                    generated:
                      type: boolean
                    created_at:
                      type: string
                      format: date-time
        500:
          description: Server error or Supabase failure

  /api/adaptive/mcqs/{examId}/{subjectId}:
    get:
      tags: [Adaptive MCQs]
      summary: Deliver full MCQ graph (20 primary, 200 secondary)
      parameters:
        - in: path
          name: examId
          required: true
          schema:
            type: string
        - in: path
          name: subjectId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of MCQ graphs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '500':
          description: Error fetching MCQ graphs

  /api/adaptive/responses/batch:
    post:
      tags: [Adaptive MCQs]
      summary: Submit batch of MCQ responses (UUID-based)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [responses]
              properties:
                responses:
                  type: array
                  items:
                    type: object
                    required:
                      - user_id
                      - mcq_id
                      - selected_option
                    properties:
                      user_id:
                        type: string
                        example: "user-uuid"
                      mcq_id:
                        type: string
                        format: uuid
                        description: UUID of the MCQ being answered
                        example: "b7f0e99f-d18d-4b27-9477-d53aab01fc80"
                      selected_option:
                        type: string
                        example: "C"
                      is_correct:
                        type: boolean
                        example: false
                      skipped_due_to_timeout:
                        type: boolean
                        example: false
                      answer_time:
                        type: string
                        format: date-time
                        example: "2025-07-30T13:20:00Z"
                      start_time:
                        type: string
                        format: date-time
                        example: "2025-07-30T13:19:30Z"
                      exam_id:
                        type: string
                        example: "exam-uuid"
                      subject_id:
                        type: string
                        example: "subject-uuid"
      responses:
        '200':
          description: Responses saved
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "âœ… 20 responses saved."
        '400':
          description: Invalid input or missing required fields
        '500':
          description: Failed to save responses


  /api/adaptive/score/submit:
    post:
      tags: [Adaptive MCQs]
      summary: Submit final quiz score
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id, exam_id, subject_id, raw_mcq_id, score]
              properties:
                user_id:
                  type: string
                exam_id:
                  type: string
                subject_id:
                  type: string
                raw_mcq_id:
                  type: string
                score:
                  type: number
      responses:
        '200':
          description: Score updated
        '500':
          description: Failed to update score

  /api/adaptive/progress/{userId}/{examId}/{subjectId}:
    get:
      tags: [Adaptive MCQs]
      summary: Resume user session progress
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: path
          name: examId
          required: true
          schema:
            type: string
        - in: path
          name: subjectId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Progress retrieved
        '500':
          description: Failed to fetch progress

  /api/adaptive/progress/update:
    post:
      tags: [Adaptive MCQs]
      summary: Update MCQ progress (optional fallback)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id, mcq_id, selected_option]
              properties:
                user_id:
                  type: string
                mcq_id:
                  type: string
                selected_option:
                  type: string
                is_correct:
                  type: boolean
                skipped_due_to_timeout:
                  type: boolean
                answer_time:
                  type: string
                start_time:
                  type: string
      responses:
        '200':
          description: Progress updated
        '500':
          description: Failed to update progress

  /api/adaptive-mcqs/next-batch:
    get:
      tags: [Adaptive MCQs]
      summary: Get next MCQ batch (20 max)
      parameters:
        - in: query
          name: userId
          required: true
          schema:
            type: string
        - in: query
          name: examId
          required: true
          schema:
            type: string
        - in: query
          name: subjectId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Next batch of MCQs
          content:
            application/json:
              schema:
                type: object
                properties:
                  batch:
                    type: array
                    items:
                      type: object
                  remaining:
                    type: integer
        '500':
          description: Failed to fetch MCQ batch

  /api/adaptive/mcqs/next-action:
    post:
      summary: Submit MCQ response and get next MCQ
      tags:
        - Adaptive MCQs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                exam_id:
                  type: string
                subject_id:
                  type: string
                raw_mcq_id:
                  type: string
                selected_option:
                  type: string
                is_correct:
                  type: boolean
                skipped_due_to_timeout:
                  type: boolean
                answer_time:
                  type: string
                  format: date-time
                start_time:
                  type: string
                  format: date-time
              required:
                - user_id
                - exam_id
                - subject_id
                - raw_mcq_id
                - selected_option
      responses:
        '200':
          description: Submission successful and next MCQ returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  mcq_graph_id:
                    type: string
                  raw_mcq_id:
                    type: string
                  progress:
                    type: object
                  next_mcq:
                    type: object
                  next_index:
                    type: integer
        '400':
          description: Missing required fields
        '500':
          description: Server error

  /api/generate-mcqs/from-raw:
    post:
      summary: Generate full MCQ graph using GPT from either raw_mcq_id or full MCQ input
      tags:
        - MCQ Generator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                raw_mcq_id:
                  type: string
                question:
                  type: string
                options:
                  type: object
                  additionalProperties:
                    type: string
                correct_answer:
                  type: string
                exam_id:
                  type: string
                subject_id:
                  type: string
              oneOf:
                - required: [raw_mcq_id]
                - required: [question, options, correct_answer, exam_id, subject_id]
      responses:
        '200':
          description: GPT-generated MCQ graph stored successfully
        '400':
          description: Missing or invalid input
        '500':
          description: GPT or Supabase error

  /api/mcqs/generate-from-input:
    post:
      tags:
        - MCQs
      summary: Generate MCQ graph from raw MCQ input using GPT
      description: |
        Accepts a raw MCQ text string (e.g., from NEETPG or USMLE) along with exam_id and subject_id.
        Sends to ChatGPT, generates primary and recursive MCQ chain, inserts into Supabase `mcqs` and `mcq_graphs`.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - raw_mcq_text
                - exam_id
                - subject_id
              properties:
                raw_mcq_text:
                  type: string
                  example: |
                    What is the origin of the left intercostal artery?
                    A. Pulmonary trunk
                    B. Thymus
                    C. Left intercostal artery
                    D. Arch of aorta
                    E. None of the above
                    Answer: C
                exam_id:
                  type: string
                  format: uuid
                  example: "bf488a73-9f75-4bd9-9b94-6a9a93efeb3b"
                subject_id:
                  type: string
                  format: uuid
                  example: "1f3467e1-7c47-4c3a-9cc3-6ae614cd3d7e"
      responses:
        "200":
          description: MCQ graph successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: âœ… MCQ Graph generated
                  graph:
                    type: object
                    properties:
                      primary_mcq:
                        type: string
                        format: uuid
                      recursive_levels:
                        type: array
                        items:
                          type: string
                          format: uuid
        "400":
          description: Missing or invalid input
        "500":
          description: GPT or Supabase error

  /api/mcqs/insert-from-json:
    post:
      summary: Insert manually created MCQ graph JSON
      tags:
        - MCQs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - graph_json
                - exam_id
                - subject_id
              properties:
                graph_json:
                  type: object
                  description: Full MCQ graph JSON (primary + 10 recursive levels)
                exam_id:
                  type: string
                subject_id:
                  type: string
      responses:
        '200':
          description: MCQ graph inserted successfully
        '400':
          description: Bad request or validation failed
        '500':
          description: Server error

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        phone:
          type: string
        email:
          type: string
        is_active:
          type: boolean
        country_code:
          type: string
        photograph_url:
          type: string
        medical_college_id:
          type: string
        year_of_joining:
          type: integer

    UserInput:
      type: object
      required:
        - country_code
        - phone
        - email
        - name
      properties:
        country_code:
          type: string
          example: "+91"
        phone:
          type: string
          example: "9876543210"
        email:
          type: string
          example: "student@example.com"
        name:
          type: string
          example: "John Doe"
        photograph_url:
          type: string
          example: "https://example.com/photo.jpg"
        medical_college_id:
          type: string
        year_of_joining:
          type: integer

    College:
      type: object
      required:
        - name
        - city
        - state
        - ownership
      properties:
        id:
          type: string
        name:
          type: string
        city:
          type: string
        state:
          type: string
        ownership:
          type: string
          enum: [Government, Private]


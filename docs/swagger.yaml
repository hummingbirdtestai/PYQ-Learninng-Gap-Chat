openapi: 3.0.0
info:
  title: PYQ Learning Gap Chat API
  version: 1.0.0
  description: API for registration, OTP login via Twilio, college data, exams & subjects.

servers:
  - url: https://pyq-learninng-gap-chat-production.up.railway.app
    description: Production server

tags:
  - name: Auth
    description: Twilio OTP Authentication
  - name: Users
    description: User registration and profile
  - name: Colleges
    description: List of medical colleges
  - name: Exams
    description: Exams and their subjects
  - name: Import MCQs
    description: Upload MCQs from Google Sheets into raw_primary_mcqs
  - name: Generation
    description: Queue MCQs for GPT-powered question generation

paths:

  /auth/otp/start:
    post:
      tags: [Auth]
      summary: Send OTP via Twilio
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [phone]
              properties:
                phone:
                  type: string
                  example: "9876543210"
      responses:
        '200':
          description: OTP sent successfully
        '400':
          description: Phone number missing or invalid
        '500':
          description: Failed to send OTP

  /auth/otp/verify:
    post:
      tags: [Auth]
      summary: Verify OTP via Twilio
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [phone, otp]
              properties:
                phone:
                  type: string
                  example: "9876543210"
                otp:
                  type: string
                  example: "123456"
      responses:
        '200':
          description: OTP verified successfully
        '401':
          description: Invalid OTP
        '500':
          description: Verification failed

  /users/register:
    post:
      tags: [Users]
      summary: Register a new student
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User registered successfully
        '409':
          description: User already registered
        '400':
          description: Missing required fields
        '500':
          description: Registration failed

  /users/{id}:
    get:
      tags: [Users]
      summary: Get user profile by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

  /users/phone/{phone}:
    get:
      tags: [Users]
      summary: Get full user profile by phone number
      parameters:
        - in: path
          name: phone
          required: true
          schema:
            type: string
            example: "9876543210"
      responses:
        '200':
          description: Full user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

  /users/status/{phone}:
    get:
      tags: [Users]
      summary: Check user activation status by phone number
      parameters:
        - in: path
          name: phone
          required: true
          schema:
            type: string
            example: "9876543210"
      responses:
        '200':
          description: Activation status
          content:
            application/json:
              schema:
                type: object
                properties:
                  phone:
                    type: string
                  is_active:
                    type: boolean
        '404':
          description: User not found

  /users/phone/{phone}/toggle-activation:
    patch:
      tags: [Users]
      summary: Toggle user activation status by phone number
      parameters:
        - in: path
          name: phone
          required: true
          schema:
            type: string
            example: "9876543210"
      responses:
        '200':
          description: Activation status updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  phone:
                    type: string
                  is_active:
                    type: boolean
        '404':
          description: User not found
        '500':
          description: Failed to update user status

  /colleges:
    get:
      tags: [Colleges]
      summary: Get all medical colleges
      responses:
        '200':
          description: List of medical colleges
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/College'
        '500':
          description: Failed to fetch colleges

  /colleges:
    post:
      tags: [Colleges]
      summary: Add a new medical college
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/College'
      responses:
        '201':
          description: College added successfully
        '400':
          description: Invalid input
        '500':
          description: Error while adding college

  /exams:
    post:
      tags: [Exams]
      summary: Create one or multiple exams
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  required: [name]
                  properties:
                    name:
                      type: string
                      example: "NEET PG"
                - type: array
                  items:
                    type: object
                    required: [name]
                    properties:
                      name:
                        type: string
                        example: "FMGE"
      responses:
        '201':
          description: Exam(s) created
        '400':
          description: Missing name field(s)
        '500':
          description: Server error

  /exams/{examId}/subjects:
    post:
      tags: [Exams]
      summary: Create one or multiple subjects under an exam
      parameters:
        - in: path
          name: examId
          required: true
          schema:
            type: string
            example: "exam-uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  required: [name]
                  properties:
                    name:
                      type: string
                      example: "Anatomy"
                - type: array
                  items:
                    type: object
                    required: [name]
                    properties:
                      name:
                        type: string
                        example: "Physiology"
      responses:
        '201':
          description: Subject(s) created
        '400':
          description: Missing examId or subject name(s)
        '500':
          description: Server error

  /exams/with-subjects:
    get:
      tags: [Exams]
      summary: Get all exams with their subjects
      responses:
        '200':
          description: Exams with nested subjects
          content:
            application/json:
              schema:
                type: object
                properties:
                  exams:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        subjects:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                              name:
                                type: string
        '500':
          description: Server error

  /api/import-mcqs:
    post:
      tags: [Import MCQs]
      summary: Import MCQs from Google Sheets into raw_primary_mcqs table
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [sheetUrl, examId, subjectId]
              properties:
                sheetUrl:
                  type: string
                  example: "https://docs.google.com/spreadsheets/d/e/abc123/pub?output=csv"
                examId:
                  type: string
                  example: "a9c1e690-4f18-4c62-b3e9-f47384135a20"
                subjectId:
                  type: string
                  example: "e7b2e1e7-5cbe-4b4e-b5ea-d0741e51e0e1"
      responses:
        '200':
          description: MCQs imported successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "âœ… Imported 25 MCQs."
        '400':
          description: Missing required fields
        '500':
          description: Import failed

  /generation/queue:
    post:
      tags: [Generation]
      summary: Queue raw MCQs for GPT generation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [examId, subjectId]
              properties:
                examId:
                  type: string
                  example: "a9c1e690-4f18-4c62-b3e9-f47384135a20"
                subjectId:
                  type: string
                  example: "e7b2e1e7-5cbe-4b4e-b5ea-d0741e51e0e1"
      responses:
        '201':
          description: MCQs queued successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "âœ… 25 MCQs added to generation queue."
                  queued:
                    type: integer
                    example: 25
        '200':
          description: No MCQs found to queue
        '400':
          description: Missing examId or subjectId
        '500':
          description: Failed to queue MCQs

  /generation/status:
    get:
      tags: [Generation]
      summary: Get current GPT generation queue status
      responses:
        '200':
          description: Current MCQ generation queue status
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    example: 100
                  pending:
                    type: integer
                    example: 60
                  processing:
                    type: integer
                    example: 20
                  completed:
                    type: integer
                    example: 15
                  failed:
                    type: integer
                    example: 5
        '500':
          description: Failed to fetch queue status

  /generation/results:
    get:
      summary: Get all GPT-generated MCQ outputs
      tags:
        - Generation
      parameters:
        - in: query
          name: examId
          required: false
          schema:
            type: string
          description: Optional exam UUID to filter results
        - in: query
          name: subjectId
          required: false
          schema:
            type: string
          description: Optional subject UUID to filter results
      responses:
        200:
          description: List of generated MCQ graphs
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        raw_mcq_id:
                          type: string
                          format: uuid
                        generated_json:
                          type: object
                        question_with_options:
                          type: string
                        correct_answer:
                          type: string
        500:
          description: Server error or Supabase failure


components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        phone:
          type: string
        email:
          type: string
        is_active:
          type: boolean
        country_code:
          type: string
        photograph_url:
          type: string
        medical_college_id:
          type: string
        year_of_joining:
          type: integer

    UserInput:
      type: object
      required:
        - country_code
        - phone
        - email
        - name
      properties:
        country_code:
          type: string
          example: "+91"
        phone:
          type: string
          example: "9876543210"
        email:
          type: string
          example: "student@example.com"
        name:
          type: string
          example: "John Doe"
        photograph_url:
          type: string
          example: "https://example.com/photo.jpg"
        medical_college_id:
          type: string
        year_of_joining:
          type: integer

    College:
      type: object
      required:
        - name
        - city
        - state
        - ownership
      properties:
        id:
          type: string
        name:
          type: string
        city:
          type: string
        state:
          type: string
        ownership:
          type: string
          enum: [Government, Private]

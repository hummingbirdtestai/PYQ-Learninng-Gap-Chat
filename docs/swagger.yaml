openapi: 3.0.0
info:
  title: PYQ Learning Gap Chat API
  version: 1.0.0
  description: API for registration, OTP login via Twilio, college data, exams & subjects.

servers:
  - url: https://pyq-learninng-gap-chat-production.up.railway.app
    description: Production server

tags:
  - name: Auth
    description: Twilio OTP Authentication
  - name: Users
    description: User registration and profile
  - name: Colleges
    description: List of medical colleges
  - name: Exams
    description: Exams and their subjects
  - name: Import MCQs
    description: Upload MCQs from Google Sheets into raw_primary_mcqs
  - name: Generation
    description: Queue MCQs for GPT-powered question generation
  - name: Adaptive MCQs
    description: Adaptive MCQ Graph Retrieval, Response Submission, Progress Resume, and Scoring

paths:

  /auth/otp/start:
    post:
      tags: [Auth]
      summary: Send OTP via Twilio
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [phone]
              properties:
                phone:
                  type: string
                  example: "9876543210"
      responses:
        '200':
          description: OTP sent successfully
        '400':
          description: Phone number missing or invalid
        '500':
          description: Failed to send OTP

  /auth/otp/verify:
    post:
      tags: [Auth]
      summary: Verify OTP via Twilio
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [phone, otp]
              properties:
                phone:
                  type: string
                  example: "9876543210"
                otp:
                  type: string
                  example: "123456"
      responses:
        '200':
          description: OTP verified successfully
        '401':
          description: Invalid OTP
        '500':
          description: Verification failed

  /users/register:
    post:
      tags: [Users]
      summary: Register a new student
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User registered successfully
        '409':
          description: User already registered
        '400':
          description: Missing required fields
        '500':
          description: Registration failed

  /users/{id}:
    get:
      tags: [Users]
      summary: Get user profile by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

  /users/phone/{phone}:
    get:
      tags: [Users]
      summary: Get full user profile by phone number
      parameters:
        - in: path
          name: phone
          required: true
          schema:
            type: string
            example: "9876543210"
      responses:
        '200':
          description: Full user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

  /users/status/{phone}:
    get:
      tags: [Users]
      summary: Check user activation status by phone number
      parameters:
        - in: path
          name: phone
          required: true
          schema:
            type: string
            example: "9876543210"
      responses:
        '200':
          description: Activation status
          content:
            application/json:
              schema:
                type: object
                properties:
                  phone:
                    type: string
                  is_active:
                    type: boolean
        '404':
          description: User not found

  /users/phone/{phone}/toggle-activation:
    patch:
      tags: [Users]
      summary: Toggle user activation status by phone number
      parameters:
        - in: path
          name: phone
          required: true
          schema:
            type: string
            example: "9876543210"
      responses:
        '200':
          description: Activation status updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  phone:
                    type: string
                  is_active:
                    type: boolean
        '404':
          description: User not found
        '500':
          description: Failed to update user status

  /colleges:
    get:
      tags: [Colleges]
      summary: Get all medical colleges
      responses:
        '200':
          description: List of medical colleges
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/College'
        '500':
          description: Failed to fetch colleges

  /colleges:
    post:
      tags: [Colleges]
      summary: Add a new medical college
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/College'
      responses:
        '201':
          description: College added successfully
        '400':
          description: Invalid input
        '500':
          description: Error while adding college

  /exams:
    post:
      tags: [Exams]
      summary: Create one or multiple exams
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  required: [name]
                  properties:
                    name:
                      type: string
                      example: "NEET PG"
                - type: array
                  items:
                    type: object
                    required: [name]
                    properties:
                      name:
                        type: string
                        example: "FMGE"
      responses:
        '201':
          description: Exam(s) created
        '400':
          description: Missing name field(s)
        '500':
          description: Server error

  /exams/{examId}/subjects:
    post:
      tags: [Exams]
      summary: Create one or multiple subjects under an exam
      parameters:
        - in: path
          name: examId
          required: true
          schema:
            type: string
            example: "exam-uuid"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  required: [name]
                  properties:
                    name:
                      type: string
                      example: "Anatomy"
                - type: array
                  items:
                    type: object
                    required: [name]
                    properties:
                      name:
                        type: string
                        example: "Physiology"
      responses:
        '201':
          description: Subject(s) created
        '400':
          description: Missing examId or subject name(s)
        '500':
          description: Server error

  /api/exams/with-subjects:
    get:
      tags: [Exams]
      summary: Get all exams with their subjects
      responses:
        '200':
          description: Exams with nested subjects
          content:
            application/json:
              schema:
                type: object
                properties:
                  exams:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        subjects:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: string
                              name:
                                type: string
        '500':
          description: Server error

  /api/import-mcqs:
    post:
      tags: [Import MCQs]
      summary: Import MCQs from Google Sheets into raw_primary_mcqs table
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [sheetUrl, examId, subjectId]
              properties:
                sheetUrl:
                  type: string
                  example: "https://docs.google.com/spreadsheets/d/e/abc123/pub?output=csv"
                examId:
                  type: string
                  example: "a9c1e690-4f18-4c62-b3e9-f47384135a20"
                subjectId:
                  type: string
                  example: "e7b2e1e7-5cbe-4b4e-b5ea-d0741e51e0e1"
      responses:
        '200':
          description: MCQs imported successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "âœ… Imported 25 MCQs."
        '400':
          description: Missing required fields
        '500':
          description: Import failed

  /generation/queue:
    post:
      tags: [Generation]
      summary: Queue raw MCQs for GPT generation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [examId, subjectId]
              properties:
                examId:
                  type: string
                  example: "a9c1e690-4f18-4c62-b3e9-f47384135a20"
                subjectId:
                  type: string
                  example: "e7b2e1e7-5cbe-4b4e-b5ea-d0741e51e0e1"
      responses:
        '201':
          description: MCQs queued successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "âœ… 25 MCQs added to generation queue."
                  queued:
                    type: integer
                    example: 25
        '200':
          description: No MCQs found to queue
        '400':
          description: Missing examId or subjectId
        '500':
          description: Failed to queue MCQs

  /generation/status:
    get:
      tags: [Generation]
      summary: Get current GPT generation queue status
      responses:
        '200':
          description: Current MCQ generation queue status
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    example: 100
                  pending:
                    type: integer
                    example: 60
                  processing:
                    type: integer
                    example: 20
                  completed:
                    type: integer
                    example: 15
                  failed:
                    type: integer
                    example: 5
        '500':
          description: Failed to fetch queue status

  /generation/results:
    get:
      summary: Get all GPT-generated MCQ outputs
      tags:
        - Generation
      parameters:
        - in: query
          name: examId
          required: false
          schema:
            type: string
          description: Optional exam UUID to filter results
        - in: query
          name: subjectId
          required: false
          schema:
            type: string
          description: Optional subject UUID to filter results
      responses:
        200:
          description: List of generated MCQ graphs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    raw_mcq_id:
                      type: string
                      format: uuid
                    exam_id:
                      type: string
                      format: uuid
                    subject_id:
                      type: string
                      format: uuid
                    graph:
                      type: object
                    generated:
                      type: boolean
                    created_at:
                      type: string
                      format: date-time
        500:
          description: Server error or Supabase failure

  /api/adaptive/mcqs/{examId}/{subjectId}:
    get:
      tags: [Adaptive MCQs]
      summary: Deliver full MCQ graph (20 primary, 200 secondary)
      parameters:
        - in: path
          name: examId
          required: true
          schema:
            type: string
        - in: path
          name: subjectId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of MCQ graphs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '500':
          description: Error fetching MCQ graphs

  /api/adaptive/responses/batch:
    post:
      tags: [Adaptive MCQs]
      summary: Submit batch of MCQ responses (UUID-based)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [responses]
              properties:
                responses:
                  type: array
                  items:
                    type: object
                    required:
                      - user_id
                      - mcq_id
                      - selected_option
                    properties:
                      user_id:
                        type: string
                        example: "user-uuid"
                      mcq_id:
                        type: string
                        format: uuid
                        description: UUID of the MCQ being answered
                        example: "b7f0e99f-d18d-4b27-9477-d53aab01fc80"
                      selected_option:
                        type: string
                        example: "C"
                      is_correct:
                        type: boolean
                        example: false
                      skipped_due_to_timeout:
                        type: boolean
                        example: false
                      answer_time:
                        type: string
                        format: date-time
                        example: "2025-07-30T13:20:00Z"
                      start_time:
                        type: string
                        format: date-time
                        example: "2025-07-30T13:19:30Z"
                      exam_id:
                        type: string
                        example: "exam-uuid"
                      subject_id:
                        type: string
                        example: "subject-uuid"
      responses:
        '200':
          description: Responses saved
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "âœ… 20 responses saved."
        '400':
          description: Invalid input or missing required fields
        '500':
          description: Failed to save responses


  /api/adaptive/score/submit:
    post:
      tags: [Adaptive MCQs]
      summary: Submit final quiz score
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id, exam_id, subject_id, raw_mcq_id, score]
              properties:
                user_id:
                  type: string
                exam_id:
                  type: string
                subject_id:
                  type: string
                raw_mcq_id:
                  type: string
                score:
                  type: number
      responses:
        '200':
          description: Score updated
        '500':
          description: Failed to update score

  /api/adaptive/progress/{userId}/{examId}/{subjectId}:
    get:
      tags: [Adaptive MCQs]
      summary: Resume user session progress
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: path
          name: examId
          required: true
          schema:
            type: string
        - in: path
          name: subjectId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Progress retrieved
        '500':
          description: Failed to fetch progress

  /api/adaptive/progress/update:
    post:
      tags: [Adaptive MCQs]
      summary: Update MCQ progress (optional fallback)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id, mcq_id, selected_option]
              properties:
                user_id:
                  type: string
                mcq_id:
                  type: string
                selected_option:
                  type: string
                is_correct:
                  type: boolean
                skipped_due_to_timeout:
                  type: boolean
                answer_time:
                  type: string
                start_time:
                  type: string
      responses:
        '200':
          description: Progress updated
        '500':
          description: Failed to update progress

  /api/adaptive-mcqs/next-batch:
    get:
      tags: [Adaptive MCQs]
      summary: Get next MCQ batch (20 max)
      parameters:
        - in: query
          name: userId
          required: true
          schema:
            type: string
        - in: query
          name: examId
          required: true
          schema:
            type: string
        - in: query
          name: subjectId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Next batch of MCQs
          content:
            application/json:
              schema:
                type: object
                properties:
                  batch:
                    type: array
                    items:
                      type: object
                  remaining:
                    type: integer
        '500':
          description: Failed to fetch MCQ batch

  /api/adaptive/mcqs/next-action:
    post:
      summary: Submit MCQ response and get next MCQ
      tags:
        - Adaptive MCQs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                exam_id:
                  type: string
                subject_id:
                  type: string
                raw_mcq_id:
                  type: string
                selected_option:
                  type: string
                is_correct:
                  type: boolean
                skipped_due_to_timeout:
                  type: boolean
                answer_time:
                  type: string
                  format: date-time
                start_time:
                  type: string
                  format: date-time
              required:
                - user_id
                - exam_id
                - subject_id
                - raw_mcq_id
                - selected_option
      responses:
        '200':
          description: Submission successful and next MCQ returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  mcq_graph_id:
                    type: string
                  raw_mcq_id:
                    type: string
                  progress:
                    type: object
                  next_mcq:
                    type: object
                  next_index:
                    type: integer
        '400':
          description: Missing required fields
        '500':
          description: Server error

  /api/generate-mcqs/from-raw:
    post:
      summary: Generate full MCQ graph using GPT from either raw_mcq_id or full MCQ input
      tags:
        - MCQ Generator
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                raw_mcq_id:
                  type: string
                question:
                  type: string
                options:
                  type: object
                  additionalProperties:
                    type: string
                correct_answer:
                  type: string
                exam_id:
                  type: string
                subject_id:
                  type: string
              oneOf:
                - required: [raw_mcq_id]
                - required: [question, options, correct_answer, exam_id, subject_id]
      responses:
        '200':
          description: GPT-generated MCQ graph stored successfully
        '400':
          description: Missing or invalid input
        '500':
          description: GPT or Supabase error

  /api/mcqs/generate-from-input:
    post:
      tags:
        - MCQs
      summary: Generate MCQ Graph from Raw Input (1 primary + up to 3 recursive)
      description: |
        Accepts a raw MCQ text and subject_id. GPT is used to generate a clinical vignette-based
        primary MCQ and up to 3 recursive MCQs based on learning gaps.
        Each MCQ is validated individually. If any recursive MCQ is invalid, it is skipped.
        GPT output failures are logged. Valid MCQs are saved in the `mcqs` table and linked in `mcq_graphs`.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - raw_mcq_text
                - subject_id
              properties:
                raw_mcq_text:
                  type: string
                  example: "Which artery is most commonly involved in anterior myocardial infarction? A. RCA B. PDA C. OM D. LAD E. LCX"
                subject_id:
                  type: string
                  format: uuid
                  example: "6de7d5ec-2b71-4a9d-84f1-cd3c1fcf3a99"
      responses:
        '200':
          description: MCQ graph generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: âœ… MCQ Graph generated
                  graph:
                    type: object
                    properties:
                      primary_mcq:
                        type: string
                        format: uuid
                      recursive_levels:
                        type: array
                        items:
                          type: string
                          format: uuid
        '400':
          description: Bad request (missing required fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Missing required fields
        '500':
          description: GPT error or insertion failure
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Failed to save MCQ graph
                  details:
                    type: string
                    example: insertMCQ is not defined

  /api/mcqs/insert-from-json:
    post:
      summary: Insert manually created MCQ graph JSON
      tags:
        - MCQs
      description: |
        Inserts a full MCQ graph directly into the database.
        - Primary MCQ can have **4 or 5 options**.
        - Each of the 10 recursive MCQs must have **exactly 5 options (Aâ€“E)**.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - graph_json
                - exam_id
                - subject_id
              properties:
                graph_json:
                  type: object
                  description: Full MCQ graph JSON (primary + 10 recursive levels)
                  properties:
                    primary_mcq:
                      type: object
                      description: Primary MCQ
                      properties:
                        stem:
                          type: string
                        options:
                          type: object
                          additionalProperties:
                            type: string
                        correct_answer:
                          type: string
                        explanation:
                          type: string
                        learning_gap:
                          type: string
                        buzzwords:
                          type: array
                          items:
                            type: string
                    recursive_levels:
                      type: array
                      description: Recursive MCQs (each must have 5 options Aâ€“E)
                      items:
                        type: object
                        properties:
                          stem:
                            type: string
                          options:
                            type: object
                            properties:
                              A:
                                type: string
                              B:
                                type: string
                              C:
                                type: string
                              D:
                                type: string
                              E:
                                type: string
                          correct_answer:
                            type: string
                          explanation:
                            type: string
                          learning_gap:
                            type: string
                          buzzwords:
                            type: array
                            items:
                              type: string
                exam_id:
                  type: string
                  format: uuid
                subject_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: MCQ graph inserted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: âœ… MCQ graph inserted successfully
                  graph:
                    type: object
                    properties:
                      primary_mcq:
                        type: string
                        format: uuid
                      recursive_levels:
                        type: array
                        items:
                          type: string
                          format: uuid
        '400':
          description: Bad request or validation failed
        '500':
          description: Server error

  /api/mcqs/graph/save-draft:
    post:
      tags:
        - MCQs
      summary: Generate and save MCQ graph from raw input text
      description: >
        Accepts raw MCQ input text (doesn't require specifying "Correct Answer: D").
        Uses ChatGPT to generate a recursive MCQ graph and saves it in the database as a draft.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - raw_text
                - subject_id
              properties:
                raw_text:
                  type: string
                  example: "A 60-year-old man presents with chest pain radiating to the left arm. Which of the following is the most likely diagnosis?"
                subject_id:
                  type: string
                  example: "d0bfa1a1-1234-4cbb-9a9d-a5f04102d903"
      responses:
        '200':
          description: Draft graph saved
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "âœ… Draft graph saved successfully."
        '400':
          description: Missing raw_text or subject_id
        '500':
          description: GPT or Supabase error

  /api/mcqs/graph/process/{graphId}:
    post:
      tags:
        - MCQs
      summary: Process MCQ graph into individual MCQs
      description: >
        Parses a saved MCQ graph from the mcq_graphs table by graphId,
        extracts all levels (primary + recursive), inserts them into the mcqs table,
        and marks the graph as processed.
      parameters:
        - in: path
          name: graphId
          required: true
          schema:
            type: string
          description: UUID of the graph to process
      responses:
        '200':
          description: Successfully processed MCQs
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "âœ… Processed 11 MCQs from graph."
                  mcqs_inserted:
                    type: integer
                    example: 11
        '400':
          description: Bad input or already processed
        '404':
          description: Graph not found
        '500':
          description: Internal server or database error

  /api/classify-subjects:
    post:
      tags:
        - MCQ Classification
      summary: Classify MCQs into MBBS subjects
      description: |
        Fetches 10 unclassified MCQs from Supabase, uses ChatGPT to classify each one,
        and updates the `subject` field. Automatically skips already-classified rows.
      responses:
        '200':
          description: Classification completed successfully
        '500':
          description: Server error during classification
  
  /api/mcqs/generate-primary:
    post:
      summary: Generate Primary MCQs from existing raw questions
      tags:
        - MCQs
      description: >
        Uses GPT to generate a structured primary MCQ from raw MCQ and correct answer.
        Output includes:
        - primary_mcq: structured clinical vignette MCQ
        - learning_gap: short bolded explanation of key missed concept
        - buzzwords: 10 concise, exam-focused revision points
      responses:
        '200':
          description: GPT-generated MCQs inserted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: âœ… GPT-based primary MCQ generation complete
                  count:
                    type: integer
                    example: 5
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                          example: 123e4567-e89b-12d3-a456-426614174000
                        status:
                          type: string
                          example: âœ… Inserted
                        preview:
                          type: string
                          example: A 40-year-old man presents with <strong>palpitations</strong> and ...
        '500':
          description: Internal server error
          
  /api/mcqs/generate-level1:
    post:
      summary: Generate recursive Level 1 MCQ based on learning gap in primary_mcq
      tags:
        - MCQs
      responses:
        '200':
          description: Successfully generated and stored Level 1 MCQs
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        status:
                          type: string
      description: |
        Picks 5 MCQs from `mcq_bank` where `primary_mcq` is present and `level_1` is null.
        Sends them to ChatGPT to generate a recursive MCQ based on learning gap using the defined prompt.
        Updates the `level_1` column with valid JSON output.


components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        phone:
          type: string
        email:
          type: string
        is_active:
          type: boolean
        country_code:
          type: string
        photograph_url:
          type: string
        medical_college_id:
          type: string
        year_of_joining:
          type: integer

    UserInput:
      type: object
      required:
        - country_code
        - phone
        - email
        - name
      properties:
        country_code:
          type: string
          example: "+91"
        phone:
          type: string
          example: "9876543210"
        email:
          type: string
          example: "student@example.com"
        name:
          type: string
          example: "John Doe"
        photograph_url:
          type: string
          example: "https://example.com/photo.jpg"
        medical_college_id:
          type: string
        year_of_joining:
          type: integer

    College:
      type: object
      required:
        - name
        - city
        - state
        - ownership
      properties:
        id:
          type: string
        name:
          type: string
        city:
          type: string
        state:
          type: string
        ownership:
          type: string
          enum: [Government, Private]

